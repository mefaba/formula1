{"version":3,"sources":["components/Header.unit/Header.unit.js","components/NextRace.unit/NextRace.unit.js","App.js","serviceWorker.js","index.js"],"names":["HeaderUnit","className","NextRaceUnit","useState","nextRace","setNextRace","useEffect","fetch","then","response","json","data","console","log","MRData","RaceTable","Races","raceName","season","round","date","time","Circuit","circuitName","Location","locality","country","url","raceRound","raceDate","city","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8PAaeA,G,iBAVI,WAGf,OACI,yBAAKC,UAAU,eAAf,e,OC0DOC,G,MA7DM,WAAO,IAAD,EACaC,mBAAS,CACzC,OAAU,GACV,UAAa,GACb,SAAY,GACZ,SAAY,GACZ,SAAY,GACZ,QAAW,GACX,KAAQ,GACR,QAAW,GACX,SAAW,KAVQ,mBACZC,EADY,KACFC,EADE,KAqCvB,OAxBAC,qBAAW,WACPC,MAAM,2CACLC,MAAK,SAACC,GAEH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACPC,QAAQC,IAAIF,EAAKG,OAAOC,UAAUC,MAAM,GAAGC,UAC3CL,QAAQC,IAAIF,EAAKG,OAAOC,WACxBV,EAAY,CACR,OAAUM,EAAKG,OAAOC,UAAUG,OAChC,UAAaP,EAAKG,OAAOC,UAAUI,MACnC,SAAYR,EAAKG,OAAOC,UAAUC,MAAM,GAAGC,SAC3C,SAAYN,EAAKG,OAAOC,UAAUC,MAAM,GAAGI,KAC3C,SAAYT,EAAKG,OAAOC,UAAUC,MAAM,GAAGK,KAC3C,QAAWV,EAAKG,OAAOC,UAAUC,MAAM,GAAGM,QAAQC,YAClD,KAAQZ,EAAKG,OAAOC,UAAUC,MAAM,GAAGM,QAAQE,SAASC,SACxD,QAAWd,EAAKG,OAAOC,UAAUC,MAAM,GAAGM,QAAQE,SAASE,QAC3D,SAAWf,EAAKG,OAAOC,UAAUC,MAAM,GAAGW,WAIhD,IAGE,yBAAK1B,UAAU,iBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aACX,2BAAIG,EAASc,QACb,2CAAad,EAASwB,UAAtB,QAGR,yBAAK3B,UAAU,gBACX,yBAAKA,UAAU,aACX,2BAAIG,EAASa,UACb,2BAAIb,EAASyB,YAGrB,yBAAK5B,UAAU,gBACX,yBAAKA,UAAU,aACX,2BAAIG,EAASsB,SACb,2BAAItB,EAAS0B,WC1ClBC,MAXf,WAGE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.985a0b32.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.unit.css\"\r\n\r\nconst HeaderUnit = () => {\r\n\r\n\r\n    return(\r\n        <div className=\"header-unit\">\r\n            FORMULA 1\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderUnit;\r\n","import React, { useState, useEffect } from 'react';\r\n/* import React from 'react'; */\r\nimport \"./NextRace.unit.css\"\r\n\r\nconst NextRaceUnit = () => {\r\n        const [nextRace, setNextRace] = useState({\r\n        \"season\": \"\",\r\n        \"raceRound\": \"\",\r\n        \"raceName\": \"\",\r\n        \"raceDate\": \"\",\r\n        \"raceTime\": \"\",\r\n        \"circuit\": \"\",\r\n        \"city\": \"\",\r\n        \"country\": \"\",\r\n        \"raceWiki\":\"\"\r\n        })\r\n\r\n    useEffect( () => {\r\n        fetch('http://ergast.com/api/f1/2020/next.json')\r\n        .then((response) => {\r\n        /* console.log(response.json()) */\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n        console.log(data.MRData.RaceTable.Races[0].raceName);\r\n        console.log(data.MRData.RaceTable)\r\n        setNextRace({\r\n            \"season\": data.MRData.RaceTable.season,\r\n            \"raceRound\": data.MRData.RaceTable.round,\r\n            \"raceName\": data.MRData.RaceTable.Races[0].raceName,\r\n            \"raceDate\": data.MRData.RaceTable.Races[0].date,\r\n            \"raceTime\": data.MRData.RaceTable.Races[0].time,\r\n            \"circuit\": data.MRData.RaceTable.Races[0].Circuit.circuitName,\r\n            \"city\": data.MRData.RaceTable.Races[0].Circuit.Location.locality,\r\n            \"country\": data.MRData.RaceTable.Races[0].Circuit.Location.country,\r\n            \"raceWiki\":data.MRData.RaceTable.Races[0].url\r\n            })\r\n        });\r\n\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"nextrace-unit\">\r\n            <div className=\"nextrace-box\">\r\n                <div className=\"race-date\">\r\n                    <p>{nextRace.season}</p>\r\n                    <p>{`RACE: ${nextRace.raceRound} `}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"nextrace-box\">\r\n                <div className=\"race-date\">\r\n                    <p>{nextRace.raceName}</p>\r\n                    <p>{nextRace.raceDate}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"nextrace-box\">\r\n                <div className=\"race-date\">\r\n                    <p>{nextRace.country}</p>\r\n                    <p>{nextRace.city}</p>  \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NextRaceUnit;\r\n","import React from 'react';\nimport './App.css';\nimport HeaderUnit from \"./components/Header.unit/Header.unit.js\"\nimport NextRaceUnit from './components/NextRace.unit/NextRace.unit';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <HeaderUnit />\n      <NextRaceUnit />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}